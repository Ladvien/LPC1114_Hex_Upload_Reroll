/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
A. Preparing the data.
1. Hex file accessed. (DONE) I noticed the FTDI chip needs to be using XON/XOFF, I assume I can use FTDI’s library to enable this functionality?
2. Hex file converted to string. Need to store hex data indexed by address.  And, I need to create a checksum to coordinate with the UUE string.  
As I understand it, the checksum is used by the LPC boot loader to ensure the UUE data uploaded is correct.  From what I read, the checksum is 
generated by adding the data bytes together.  Data is not delivered to the LPC in greater than 45 bytes at a time.  Therefore, the checksum 
should be the sum of every 45 bytes?
3. Hex string encoded into a UUE string. I need to divide UUE data into strings of 61 characters, which gives 45 bytes of data.
 
B. LPC-HOST Handshake
1. HOST Send: ‘?’
2. LPC auto-baud measures the data.  The host UART should be set to 8, 1, N.
3. LPC Responds: “Synchronized<CR><LF>”
4. Host should respond: “Synchronized<CR><LF>”
5. LPC Looks at the characters to verify synchronization.
6. LPC Responds: “OK<CR><LF>”
7. Host send crystal frequency in kHz: “12500<CR><LF>”
8. LPC Responds: “OK<CR><LF>”
 
C. Host Writes to LPC
1. Host sends Unlock command: “U 23130<CR><LF>”
2.  Host sends: “W <RAM Address in Decimal> 61<CR><LF>”
3. Host sends UUE line to RAM. Host sends: 61 characters of UUE
4. Host sends respective checksum.
5. If checksum matches, LPC responds: “OK<CR><LF>”
6. If checksum doesn’t match, LPC responds: “RESEND<CR><LF>.” The host should repeat steps 11 & 12.
7. ....we fill up so much of the RAM....
8. Host sends: “P 0 0<CR><LF>.”  The prepares the Flash sector 0 for writing.
9. Host sends: “C <RAM Address in Decimal> 512 0<CR><LF>.”  This should copy two pages of RAM data to Flash at sector 0.  
The smallest amount of data we may write to Flash is 256 bytes (one page).
10. Repeat 1-9 until all data is written to the LPC’s Flash memory.

*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// HM-11-A sends "AT+PIO30"
	// The HM-11-B PIO3 will go low, which sets the LPC1114 ISP MODE to LOW.  
	// HM-11-A sends "AT+PIO20"
	// Then, the HM-11-B PIO2 goes LOW for ~5uS.  This will reset the LPC.
	// As the LPC comes back up it checks the ISP MODE pin and sees it LOW.
	// HM-11-A sends "AT+PIO31" waits ~100mS then sends "AT+PIO21"
	// The HM-11-B PIO3 and PIO2 will go HIGH.
	// The LPC enters ISP mode.
	// The HM-11 PIO2 & PIO3 go HIGH.
	// The program is uploaded to the LPC.
	// HM-11-A sends "AT+PIO20"
	// HM-11-B PIO2 goes LOW, resetting the LPC.
	// HM-11-A sends "AT+PIO21"
	// HM-11-B PIO2 goes HIGH and the LPC runs the uploaded program.